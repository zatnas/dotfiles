" XDG Directory Specification
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

set viminfo=!,h,<50,'1000,/5000,:5000,s5000
if has('nvim')
	set viminfo+=n$XDG_DATA_HOME/vim/nviminfo
else
	set viminfo+=n$XDG_DATA_HOME/vim/viminfo
endif

let g:netrw_home=$XDG_DATA_HOME.'/vim'

call plug#begin("$XDG_CONFIG_HOME/vim/plugged")
" Plug 'ActivityWatch/aw-watcher-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'sheerun/vim-polyglot'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'nvie/vim-flake8'
Plug 'tomasr/molokai'
"Plug 'neoclide/coc.nvim', {'branch': 'release'} " High RAM Usage
"Plug 'valloric/youcompleteme' " Slows startup-time
"Plug 'mg979/vim-visual-multi' " Unused

if has('python')
	Plug 'valloric/matchtagalways'
endif

Plug 'airblade/vim-gitgutter'
let g:gitgutter_sign_added                   = '●'
let g:gitgutter_sign_removed                 = '●'
let g:gitgutter_sign_removed_above_and_below = '●'
let g:gitgutter_sign_removed_first_line      = '●'
let g:gitgutter_sign_modified                = '●'
let g:gitgutter_sign_modified_removed        = '●'
highlight SignColumn                    ctermfg=0 ctermbg=0
highlight GitGutterAdd    guifg=#009900 ctermfg=2 ctermbg=0
highlight GitGutterChange guifg=#bbbb00 ctermfg=3 ctermbg=0
highlight GitGutterDelete guifg=#ff2222 ctermfg=1 ctermbg=0
set signcolumn=yes
set updatetime=50

Plug 'zethnest/ack.vim'
nnoremap g/ :AckBuffer ""<Left>
nnoremap g? :Ack ""<Left>
if executable('rg')
	let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

"Plug 'kien/ctrlp.vim' " Fzf is slower but better fuzzy match
"let g:ctrlp_map = ''
"let g:ctrlp_cmd = 'CtrlP'
"nnoremap <silent> <C-P> :CtrlPBuffer<CR>

let g:fzf_command_prefix = 'Fzf'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_preview_window = []
nnoremap <silent> <C-P> :FzfBuffers<CR>

Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key = '\'
let g:user_emmet_install_global = 0
autocmd FileType html,css,php EmmetInstall

Plug 'dense-analysis/ale'
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0

Plug 'junegunn/vim-easy-align'
vmap ga <Plug>(EasyAlign)

if has('nvim')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	let g:deoplete#enable_at_startup = 1
endif
call plug#end()

let mapleader='\'

" Extra Files Management
set undofile
set noswapfile

" Window & Buffer
set hidden
set splitbelow
set splitright

" UI
set linebreak
set nowrap
set incsearch
set laststatus=2

set mouse=nvc
set clipboard=unnamed
set backspace=indent,eol,start
set grepprg=grep\ -rnsI

set complete+=d
set diffopt+=vertical
set tags+=.git/tags,.git/TAGS
set history=10000

set listchars=tab:░▒,trail:▓,space:∙,nbsp:,conceal:
" set iskeyword=@,48-57,192-255 " originally @,48-57,_,192-255

" Folding
set foldlevelstart=999
set foldmethod=indent

" Command Line Completion
set wildcharm=<C-z>
set wildmenu
set wildmode=full

" Indentation
set autoindent
set shiftround
set smartindent
set tabstop=4
set shiftwidth=0
set softtabstop=4

set exrc   " Read .vimrc in pwd
set secure " Disabled commands in pwd .vimrc

nnoremap s <NOP>
nnoremap S <NOP>

nnoremap <silent> ZW :set wrap!<CR>
nnoremap <silent> ZH :set list!<CR>
nnoremap <silent> Zh :set hlsearch!<CR>
nnoremap <silent> gb :b#<CR>

nnoremap <silent> gc gnc
inoremap <silent> <C-G> <ESC>gnc

inoremap <C-B> <Left>
inoremap <C-F> <Right>
inoremap <C-A> <Home>
inoremap <C-E> <End>

syntax on
filetype plugin on
filetype plugin indent on

autocmd BufWritePost *vimrc source $MYVIMRC

" autocmd BufReadPost * call AWStart()
